package main

import (
	"encoding/gob"
	"fmt"
	qrcodeTerminal "github.com/Baozisoftware/qrcode-terminal-go"
	"github.com/Rhymen/go-whatsapp"
	"github.com/kataras/golog"
	"os"
	"time"
)

const MessageToSend = "Hey Palavian's\n\nReady to eat Fresh Fruits daily...?!\n\nWe are here to bring you Quality and Fresh Fruits Daily...\n\nOrder Now...\n\n‚Ä¢ Anjeer - 100/Box\n\n‚Ä¢ Apple - ‚Çπ120/Kg\n\n‚Ä¢ Apple Royal Gala- ‚Çπ225/Kg\n\n‚Ä¢ Mosambi - ‚Çπ140/kg\n\n‚Ä¢ Plum - ‚Çπ250/Kg\n\n‚Ä¢ Orange - ‚Çπ100/kg\n\n‚Ä¢ Chiku- ‚Çπ80/kg\n\n‚Ä¢ Anar- ‚Çπ120/kg\n\n‚Ä¢ Custer Apple- ‚Çπ140/Kg\n\n‚Ä¢ Pear(S.A)- ‚Çπ240/kg\n\n‚Ä¢ Water Melon - ‚Çπ60 pc\n\n‚Ä¢ Musk Melon - ‚Çπ60 Pc\n\n‚Ä¢ Sweetcorn - ‚Çπ15/Pc\n\n‚Ä¢ Litchi - ‚Çπ300/kg (Min 1 Kg)\n\n‚Ä¢ Dates(Khaarek) - ‚Çπ100/Kg\n\n‚Ä¢ Jamun - ‚Çπ300/Kg (Min 1Kg)\n\n‚Ä¢ Elaichi Banana - ‚Çπ70/Dz\n\n‚Ä¢ Dragon Fruit - ‚Çπ50/Pc\n\n‚Ä¢ Kiwi - ‚Çπ50/Box(3pc)\n\n‚Ä¢ Papaya - ‚Çπ40/Pc\n\n‚Ä¢ Peach - ‚Çπ200/kg\n\n‚Ä¢ Green Badam - ‚Çπ250/Kg\n\n‚Ä¢ Kesar Mango - ‚Çπ550/ 5kg (Min 5 Kg)\n\n‚Ä¢ Langda Mango - ‚Çπ450/ 5kg\n\n‚Ä¢ Dasheri Mango - ‚Çπ450/ 5Kg\n\n\n\nPayment Mode :\nGpay/UPI Number -\n+91 9167908057\n\nContact Person -\nAshwin Gohil\n+91 9323430427\n\nEat Healthy, Stay Healthy...!\nüçèüçéüçêüçäüçåüçâüçá\U0001FAD0üçíüçë\U0001F96D\n\n**Free Home Delivery\n\nhttps://chat.whatsapp.com/JsqUz5Ej8yTGOEnkj1fOlp"
var contacts = []string{"919768187108", "919769908060"}

func main(){

	//=========New Connection
	wac, err := whatsapp.NewConn(30 * time.Second)
	if err != nil {
		panic(err)
	}
	wac.SetClientVersion(2, 2121, 6)

	err = login(wac)
	if err != nil {
		golog.Error(err)
	} else {
		golog.Info("login Successful")
	}

	<-time.After(3 * time.Second)

	//=========Looping through contacts and sending messages
	for i:=0;i<len(contacts);i++{

		img, err := os.Open("frusion.jpeg")
		if err != nil {
			fmt.Fprintf(os.Stderr, "error reading file: %v\n", err)
			os.Exit(1)
		}

		msg := whatsapp.ImageMessage{
			Info: whatsapp.MessageInfo{
				RemoteJid: fmt.Sprintf("%s@s.whatsapp.net", contacts[i]),
			},
			Type:    "image/jpeg",
			Caption: MessageToSend,
			Content: img,
		}

		msgId, err := wac.Send(msg)
		if err != nil {
			fmt.Fprintf(os.Stderr, "error sending message: %v", err)
			os.Exit(1)
		} else {
			fmt.Println("Message Sent -> ID : " + msgId)
		}

		//<-time.After(1 * time.Second)
		//fmt.Println("Sending Message to ",contacts[i])
		//
		//text := whatsapp.TextMessage{
		//	Info: whatsapp.MessageInfo{
		//		RemoteJid: fmt.Sprintf("%s@s.whatsapp.net", contacts[i]),
		//	},
		//	Text: MessageToSend,
		//}
		//
		//x, err := wac.Send(text)
		//fmt.Println(x)
		//if err!=nil {
		//	fmt.Println(err)
		//}
	}
}

func login(wac *whatsapp.Conn) error {

	session, err := readSession()
	if err == nil {
		session, err = wac.RestoreWithSession(session)
		if err == nil {
			return nil
		}
	}

	//==========New QR
	qr := make(chan string)
	go func() {
		terminal := qrcodeTerminal.New()
		terminal.Get(<-qr).Print()
	}()

	//=========Passing the QR scan to login
	session, err = wac.Login(qr)
	if err != nil {
		return fmt.Errorf("error during login: %v\n", err)
	}

	err = writeSession(session)
	if err!=nil {
	   	return fmt.Errorf("error saving session: %v\n", err)
	}

	return nil
}

func readSession() (whatsapp.Session, error) {
	session := whatsapp.Session{}
	file, err := os.Open("./whatsappSession.gob")
	if err != nil {
		return session, err
	}
	defer file.Close()
	decoder := gob.NewDecoder(file)
	err = decoder.Decode(&session)
	if err != nil {
		return session, err
	}
	return session, nil
}

func writeSession(session whatsapp.Session) error {
	file, err := os.Create("./whatsappSession.gob")
	if err != nil {
		return err
	}
	defer file.Close()
	encoder := gob.NewEncoder(file)
	err = encoder.Encode(session)
	if err != nil {
		return err
	}
	return nil
}


